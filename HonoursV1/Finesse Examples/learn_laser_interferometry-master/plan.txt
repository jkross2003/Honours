
---------------------------------------------------------------------------------
Update 17.04.2016, Andreas

- for self study, course can be downloaded from Github is whatever way
  Github recommends, we need to provide installation documentation
	for the steps after the downloads until Finesse, Pykat and the
  notebooks run
- for reference don't link to Github pages but to static HTML version of the course
  hosted on gwoptics.org

Daniel Brown to adapt his TOC script for the course to do the
following:
- traverse the course folder tree
- in each folder look for a Intro.txt file, which is a HTML source
file for generating a Intro.html file for the subfolder. The Intro.txt
file would contain the text e.g. a small introduction. The script
would add the TOC for this folder and subfolders
- the script would convert all notebooks to HTML (using the CSS and
HTML template from gwoptics.org)
- all the output from the script would be written into a HTML folder
in the repo and committed, this folder would then also be used
for the static pages hosted on gwoptics.org
  
Philip Jones to write PyKat 'nightly test' scripts
- following the style of the Finesse tests
- using examples directly from the IPyhton notebooks of the course and
other examples
- python files write numeric data into output file, which is compared
to a numeric reference file (do we need to specific the format?)
- should be possible to adapt Finesse test scripts for this
- coverage should include all files form the course so that we
know if any update to Finesse or Pykat has broken the examples,
this makes sure that the course always presents a good reference for
leaning Pykat


---------------------------------------------------------------------------------



* Outside files, which should bee seen and read first:

- Intro in PDF: Should explain the aim of this school, which people it is aimed at, why they should look at the material, introduction to gravitational wave laser interferometry. And very briefly answer: why numerical modelling with Finesse? Why PyKat? Why in notebook format?

- Installing instructions in PDF: downloading, installing, find online information.

* Background “physics” that wee need to cover (i.e. point people to reading material) during the introduction notebooks, or possibly in a PDF-document.

- Frequency domain
- Complex representation of the electric field
- Amplitude as sqrt(W)
- Laser
  - Coherence
  - Collimated beam
  - Monochromatic field or single frequency field
  - Paraxial approximation
- Sideband picture


* The course

1. Introduction
   (a) Ipython notebook
           * Basic notebook usage.
           * After: Have seen how to write code
		    Have seen how to write markdown
		    Have seen how to show figures
		    Have seen how to change colours, fonts etc.
		    Have seen how to make inline plots
   (b) PyKat
       - Motivation, usage
	   * Facilitate advanced Finesse usage
           * Python free and open source
           * Extended to perform computations outside Finesse.
       - Basic commands
	   * How to create the kat-object 
           * Parse Finesse code 
           * Run the simulation.
	   * Plot results
   (c) Finesse introduction
       - Motivation, usage.

2. Plane waves
   (a) Fabry-Perot cavity

       - Resonance (Missing table of content)
         * Powers vs. cavity mirror tuning
	 * Powers vs. cavity space length
	 * Offset laser freq. and repeat the previous task
         * After: 
	   Played with a cavity and the concept of resonance
	   Experienced difference between length and tuning
           Experienced how Finesse defines length in terms of phases

       - Free spectral range (Work in progress)
         * Sweep laser frequency
         * Change cavity length, and repeat
	 * Change lambda0 and repeat

       - Line width (Work in progress)

       - Finesse of a cavity (Work in progress)
         * Aim for an intuitive picture in terms of roundtrip loss or Q-value.
         * FSR/FWHM
         * Play with reflectivity and cavity lengths.
         * After: Seen how the length and reflectivity affects the Finesse
                  Know roughly with which factor a cavity with on resonance 
		  with a given Finesse amplifies the power/amplitude.

       - Over coupled, under coupled, and impedance matched. (Work in progress)

   (b) Michelson Interferometer

       - Arm length difference (Missing table of content)
	 * Show response to arm length difference in tunings
	 * Calibrate setup to the dark fringe (initially on bright fringe)
	 * Offset differential arm tuning to yield 10 mW output.
	 * Plot power vs. macroscopical arm length difference.
	 * Change carrier frequency and repeat previous task
	 * Offset laser freq. and repeat previous task

       - Mirror asymmetries (work in progress)
	 * Plot Power vs. microscopical arm length difference for different BS asymmetries
         * Plot Power vs. microscopical arm length difference for different end mirror asymmetries

   (c) Circular cavity

   (d) Modulation and optical beats
       - Phase modulation
       - Frequency modulation
       - Amplitude modulation
       - Optical beat
       - Phase modulation by a moving mirror
   (e) Demodulation and transfer function
       - Demodulation: detecting optical beat
       - Single demodulation
       - Double demodulation
       - Transfer function
   (f) Controlling Fabry-Perot cavity
       - PDH
         - Creating a sensing signal
         - Optimising the sensing signal
         - Gain of sensing signal
         - Forming locking loop
   
       -
   

3. Hermite-Gaussian beams
   (a) Intro
   (b) Fabry-Perot cavity
       - Mirror curvature and stability (definition of g and m values)
       - Cavity eigenmode
       - Higher order modes
       - Cavity scan and the effect of the Gouy-phase
       - Mode mismatch
       - Misaligned cavity


Reference chapter

A. Finesse componentes
   (a) Active components
       - Laser
   (b) Optics
       - Mirrors
       - Beamsplitters
       - Lenses
       - Spaces
   (c) Detectors
       - Photo diodes
       - Amplitude detector

B. Finesse commands

 

